# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZiscztjFWsyW9TEKxIn1RKQj26Fg9fOE
"""

import math
p,q=map(int,input('Enter the primes p and q: ').split())
n=p*q
phi=(p-1)*(q-1)
for i in range(2,phi):
    if math.gcd(phi,i)==1:
        e=i
        break
d=pow(e,-1,phi)
m=int(input("Enter the message:"))
ct=pow(m,e,n)
print("public key:",{e,n})
print("Private key:",{d,n})
print("encrypted msg is ",ct)
print("Decrypted msg is ",pow(ct,d,n))

import random

# Input prime number and primitive root
p = int(input("Enter a prime number (p): "))
g = int(input("Enter primitive root of p (g): "))

# Alice's private and public keys
a = random.randint(2, p - 2)
A = pow(g, a, p)
print(f"\nAlice's private key (a): {a}")
print(f"Alice's public key (A): {A}")

# Bob's private and public keys
b = random.randint(2, p - 2)
B = pow(g, b, p)
print(f"\nBob's private key (b): {b}")
print(f"Bob's public key (B): {B}")

# Shared secret calculation
alice_secret = pow(B, a, p)
bob_secret = pow(A, b, p)

print(f"\nAlice's shared secret: {alice_secret}")
print(f"Bob's shared secret:   {bob_secret}")

# Verification
if alice_secret == bob_secret:
    print("\n✅ Shared secret successfully established!")
else:
    print("\n❌ Shared secret mismatch!")

#Implementation of Digital Signature Standard (DSS) for generating and verifying Digital Signatures.
import hashlib, random

def generate_keys(p, q, h):
    g = pow(h, (p-1)//q, p)
    x = random.randint(1, q-1)
    y = pow(g, x, p)
    return (p, q, g, y), x

def sign_message(M, x, p, q, g):
    H = int(hashlib.sha1(M.encode()).hexdigest(), 16)
    while True:
        k = random.randint(1, q-1)
        r = pow(g, k, p) % q
        if r == 0:
            continue
        try:
            k_inv = pow(k, -1, q)
        except ValueError:
            continue
        s = (k_inv * (H + x*r)) % q
        if s != 0:
            break
    return (r, s)

def verify_signature(M, sig, pub):
    r, s = sig
    p, q, g, y = pub
    if not (0 < r < q) or not (0 < s < q):
        return False
    H = int(hashlib.sha1(M.encode()).hexdigest(), 16)
    try:
        w = pow(s, -1, q)
    except ValueError:
        return False
    u1 = (H * w) % q
    u2 = (r * w) % q
    v = (pow(g, u1, p) * pow(y, u2, p) % p) % q
    return v == r

p = 47
q = 23
h = 2

pub, priv = generate_keys(p, q, h)

msg = input("Enter the message to sign: ")
sig = sign_message(msg, priv, p, q, pub[2])
print("Signature:", sig)
print("Signature valid?", verify_signature(msg, sig, pub))

openssl genpkey -algorithm RSA -out private.key -pkeyopt rsa_keygen_bits:2048

openssl req -new -key private.key -out request.csr

openssl req -x509 -key private.key -in request.csr -out certificate.crt -days 365

openssl pkcs12 -export -out bundle.p12 -inkey private.key -in certificate.crt

openssl x509 -in certificate.crt -text -noout

openssl s_client -connect example.com:443

sudo mkdir -p /etc/snort/rules

sudo touch /etc/snort/rules/local.rules

sudo nano /etc/snort/rules/local.rules

#Paste this in that
alert icmp any any -> any any (msg:"Ping detected"; sid:1000001;)

sudo snort -A console -q -c /etc/snort/snort.conf -i lo

#open another terminal
ping localhost

#See in the first terminal it will be detected

#SHA
K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
]
H = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,
]
def rotr(x, n):
    return ((x >> n) | (x << (32 - n))) & 0xffffffff
def pad_message(msg):
    l = len(msg) * 8
    msg += b'\x80'
    while (len(msg) * 8 + 64) % 512 != 0:
        msg += b'\x00'
    msg += l.to_bytes(8, 'big')
    return msg
def sha256(msg):
    msg = pad_message(msg)
    h = H[:]
    for i in range(0, len(msg), 64):
        block = msg[i:i+64]
        w = [int.from_bytes(block[j:j+4], 'big') for j in range(0, 64, 4)]
        w += [0] * 48
        for j in range(16, 64):
            s0 = rotr(w[j-15], 7) ^ rotr(w[j-15], 18) ^ (w[j-15] >> 3)
            s1 = rotr(w[j-2], 17) ^ rotr(w[j-2], 19) ^ (w[j-2] >> 10)
            w[j] = (w[j-16] + s0 + w[j-7] + s1) & 0xffffffff
        a, b, c, d, e, f, g, hh = h
        for j in range(64):
            S1 = rotr(e, 6) ^ rotr(e, 11) ^ rotr(e, 25)
            ch = (e & f) ^ (~e & g)
            temp1 = (hh + S1 + ch + K[j] + w[j]) & 0xffffffff
            S0 = rotr(a, 2) ^ rotr(a, 13) ^ rotr(a, 22)
            maj = (a & b) ^ (a & c) ^ (b & c)
            temp2 = (S0 + maj) & 0xffffffff
            hh, g, f, e, d, c, b, a = g, f, e, (d + temp1) & 0xffffffff, c, b, a, (temp1 + temp2) & 0xffffffff
        h = [(x+y) & 0xffffffff for x,y in zip(h, [a,b,c,d,e,f,g,hh])]
    return ''.join(f'{x:08x}' for x in h)
if __name__ == "__main__":
    msg = input("Enter message: ")
    print(sha256(msg.encode('utf-8')))
    msg = input("Enter message: ")
    print(sha256(msg.encode('utf-8')))

import struct
def rotr(x, n):
    return (x >> n) | (x << (32 - n)) & 0xFFFFFFFF
K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
]
H = [
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19,
]
def sha256(message):
    if isinstance(message, str):
        message = message.encode()
    original_length = len(message) * 8
    message += b'\x80'
    while (len(message) * 8) % 512 != 448:
        message += b'\x00'
    message += struct.pack('>Q', original_length)
    chunks = [message[i:i+64] for i in range(0, len(message), 64)]
    h = H[:]
    for chunk in chunks:
        w = list(struct.unpack('>16L', chunk)) + [0]*48
        for i in range(16, 64):
            s0 = rotr(w[i-15], 7) ^ rotr(w[i-15], 18) ^ (w[i-15] >> 3)
            s1 = rotr(w[i-2], 17) ^ rotr(w[i-2], 19) ^ (w[i-2] >> 10)
            w[i] = (w[i-16] + s0 + w[i-7] + s1) & 0xFFFFFFFF
        a, b, c, d, e, f, g, h0 = h
        for i in range(64):
            S1 = rotr(e, 6) ^ rotr(e, 11) ^ rotr(e, 25)
            ch = (e & f) ^ (~e & g)
            temp1 = (h0 + S1 + ch + K[i] + w[i]) & 0xFFFFFFFF
            S0 = rotr(a, 2) ^ rotr(a, 13) ^ rotr(a, 22)
            maj = (a & b) ^ (a & c) ^ (b & c)
            temp2 = (S0 + maj) & 0xFFFFFFFF
            h0 = g
            g = f
            f = e
            e = (d + temp1) & 0xFFFFFFFF
            d = c
            c = b
            b = a
            a = (temp1 + temp2) & 0xFFFFFFFF
        h = [
            (h[0] + a) & 0xFFFFFFFF,
            (h[1] + b) & 0xFFFFFFFF,
            (h[2] + c) & 0xFFFFFFFF,
            (h[3] + d) & 0xFFFFFFFF,
            (h[4] + e) & 0xFFFFFFFF,
            (h[5] + f) & 0xFFFFFFFF,
            (h[6] + g) & 0xFFFFFFFF,
            (h[7] + h0) & 0xFFFFFFFF,
        ]
    return ''.join(f'{value:08x}' for value in h)
text = input("Enter input:")
print("SHA-256:", sha256(text))